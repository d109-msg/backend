<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper
        namespace="com.ssafy.msg.scheduler.model.mapper.SchedulerMapper">

    <update id="updateNickname" parameterType="string">
        UPDATE participants p
        SET nickname = CONCAT(nickname, ' (', p.job_id , ')')
        WHERE room_id = #{roomId};
    </update>

    <select id="getFlagNight">
        SELECT value FROM static_flag WHERE id = 'flag_night';
    </select>

    <update id="updateStaticFlagNight" parameterType="int">
        UPDATE static_flag
        SET value = #{flagNight}
        WHERE id = 'flag_night';
    </update>

    <update id="updateFlagNight" parameterType="map">
        UPDATE rooms
        SET flag_night = #{flagNight}
        WHERE id = #{roomId};
    </update>

    <select id="getWaitingUsersId"
            resultType="int">
        SELECT user_id
        FROM participants
        WHERE room_id = 'room1'
        ORDER BY id;
    </select>

    <insert id="createRoom" parameterType="RoomDto">
        insert into rooms
            (id, data_type, create_time, start_time, title, image_url) values (#{id}, #{dataType}, now(), now(), #{title}, #{imageUrl})
    </insert>

    <select id="getUnendRoom"
            resultType="string">
        select id
        from rooms
        where start_time is not null and end_time is null and (data_type='랜덤' or  data_type='그룹');
    </select>

    <select id="getUnstartRoom"
            resultType="RoomIdTitleDto">
        select p.room_id, r.title
        from participants p
                 join rooms r on p.room_id = r.id
        where r.start_time is null and r.data_type = '그룹'
        group by p.room_id
        having count(p.user_id) = 7;
    </select>

    <update id="updateFlagAvailable">
        update rooms
        set flag_available = 0
        where DATEDIFF(NOW(), end_time) = 1 and (data_type = '랜덤' or data_type  = '그룹');
    </update>

    <select id="getReporterVoteResult" resultType="integer" parameterType="Map">
        SELECT dm.reporter_vote
        FROM daily_missions dm
                 JOIN participants p ON dm.participant_id = p.id
        WHERE p.room_id = #{roomId}
          AND dm.day = #{day}
          AND dm.reporter_vote IS NOT NULL;
    </select>

    <select id="getJudgeAbility" parameterType="Map" resultType="JudgeResultDto">
        SELECT p.id AS participantId
             ,dm.normal_vote AS vote
             , p.ability
        FROM daily_missions dm
                 INNER JOIN participants p ON dm.participant_id = p.id
        WHERE p.room_id = #{roomId}
          AND p.job_id = '판사'
          AND dm.day = #{day};
    </select>

    <select id="getGangsterVoteResult" resultType="Integer" parameterType="int">
        SELECT p.ability
        FROM participants p
                 JOIN (
            SELECT room_id
            FROM participants
            WHERE id = #{participantId}
        ) pr ON p.room_id = pr.room_id
        WHERE p.job_id = '건달' AND p.flag_die = 0;
    </select>

    <select id="getNormalVoteResult" resultType="int" parameterType="string">
        SELECT dm.normal_vote
        FROM daily_missions dm
                 JOIN (
            SELECT MAX(day) AS max_day
            FROM daily_missions
            WHERE participant_id IN (
                SELECT id FROM participants WHERE room_id = #{roomId} and flag_die = 0
            )
        ) latest_day ON dm.day = latest_day.max_day
        WHERE dm.participant_id IN (
            SELECT id FROM participants WHERE room_id = #{roomId} and flag_die = 0
        )
        group by dm.normal_vote
        having count(dm.normal_vote) = (
            SELECT count(dm.normal_vote)
            FROM daily_missions dm
                     JOIN (
                SELECT MAX(day) AS max_day
                FROM daily_missions
                WHERE participant_id IN (
                    SELECT id FROM participants WHERE room_id = #{roomId} and flag_die = 0
                )
            ) latest_day ON dm.day = latest_day.max_day
            WHERE dm.participant_id IN (
                SELECT id FROM participants WHERE room_id = #{roomId} and flag_die = 0
            )
            group by dm.normal_vote
            order by count(dm.normal_vote) desc
            limit 1
            );
    </select>

    <select id="getMafiaVoteResult" parameterType="string"
            resultType="int">
        SELECT dm.mafia_vote
        FROM daily_missions dm
                 JOIN (
            SELECT MAX(day) AS max_day
            FROM daily_missions
            WHERE participant_id IN (
                SELECT id FROM participants WHERE room_id = #{roomId} and flag_die = 0
            )
        ) latest_day ON dm.day = latest_day.max_day
        WHERE dm.participant_id IN (
            SELECT id FROM participants WHERE room_id = #{roomId} and flag_die = 0 and job_id IN ('마피아', '훼방꾼', '변장술사', '스파이', '건달')
        )
        group by dm.mafia_vote
        having count(dm.mafia_vote) = (
            SELECT count(dm.mafia_vote)
            FROM daily_missions dm
                     JOIN (
                SELECT MAX(day) AS max_day
                FROM daily_missions
                WHERE participant_id IN (
                    SELECT id FROM participants WHERE room_id = #{roomId} and flag_die = 0
                )
            ) latest_day ON dm.day = latest_day.max_day
            WHERE dm.participant_id IN (
                SELECT id FROM participants WHERE room_id = #{roomId} and flag_die = 0 and job_id IN ('마피아', '훼방꾼', '변장술사', '스파이', '건달')
            )
            group by dm.mafia_vote
            order by count(dm.mafia_vote) desc
            limit 1
            );
    </select>

    <select id="getDoctorVoteResult" parameterType="string"
            resultType="int">
        SELECT dm.doctor_vote
        FROM daily_missions dm
                 JOIN (
            SELECT MAX(day) AS max_day
            FROM daily_missions
            WHERE participant_id IN (
                SELECT id FROM participants WHERE room_id = #{roomId} and flag_die = 0
            )
        ) latest_day ON dm.day = latest_day.max_day
        WHERE dm.participant_id IN (
            SELECT id FROM participants WHERE room_id = #{roomId} and flag_die = 0 and job_id='의사'
        )
        group by dm.doctor_vote
        having count(dm.doctor_vote) = (
            SELECT count(dm.doctor_vote)
            FROM daily_missions dm
                     JOIN (
                SELECT MAX(day) AS max_day
                FROM daily_missions
                WHERE participant_id IN (
                    SELECT id FROM participants WHERE room_id = #{roomId} and flag_die = 0
                )
            ) latest_day ON dm.day = latest_day.max_day
            WHERE dm.participant_id IN (
                SELECT id FROM participants WHERE room_id = #{roomId} and flag_die = 0 and job_id='의사'
            )
            group by dm.doctor_vote
            order by count(dm.doctor_vote) desc
            limit 1
            );
    </select>

    <select id="getOneRandomMafia" resultType="RandomMafiaDto" parameterType="string">
        SELECT id, job_id, nickname FROM participants
        WHERE room_id = #{roomId}
          AND flag_die = 0
          AND (job_id = '훼방꾼' OR job_id = '스파이' OR job_id = '마피아' or job_id = '건달')
        ORDER BY rand() LIMIT 1;
    </select>

    <update id="killParticipant" parameterType="int">
        UPDATE participants
        SET
            flag_die = 1
        WHERE id = #{id}
    </update>

    <update id="manageNonCompleter" parameterType="int">
        UPDATE participants
        SET
            flag_die = 1,
            flag_win = 0
        WHERE id = #{id}
    </update>

    <select id="getParticipant" parameterType="int"
            resultType="ParticipantDto">
        select *
        from participants
        where id = #{id}
    </select>

    <select id="getMyNormalVoteId" parameterType="Map" resultType="ParticipantDto">
        SELECT
            p.*
        FROM
            participants p
                JOIN
            daily_missions dm ON p.id = dm.normal_vote
        WHERE
            dm.participant_id = #{participantId}
          AND dm.day = #{day};

    </select>

    <select id="getAliveParticipant" parameterType="string"
            resultType="int">
        SELECT
            COUNT(id)
        FROM participants
        WHERE room_id = #{roomId} and flag_die = 0;
    </select>

    <select id="getAliveMafia" parameterType="string" resultType="int">
        SELECT
            COUNT(id)
        FROM participants
        WHERE room_id = #{roomId}
          AND job_id IN ('마피아', '훼방꾼', '변장술사', '스파이', '건달')
          AND flag_die = 0;
    </select>

    <select id="isMafiaWin" parameterType="string" resultType="int">
        SELECT
            (COUNT(CASE WHEN job_id IN ('마피아', '훼방꾼', '변장술사', '스파이', '건달') AND flag_die = 0 THEN 1 END) >=
             COUNT(CASE WHEN job_id NOT IN ('마피아', '훼방꾼', '변장술사', '스파이', '건달') AND flag_die = 0 THEN 1 END)) AS isMafiaWin
        FROM
            participants
        WHERE room_id = #{roomId};
    </select>

    <update id="updateWinFlag" parameterType="UpdateWinFlagDto">
        <choose>
            <when test="isMafiaWin == 1">
                UPDATE participants
                SET flag_win = 0
                WHERE room_id = #{roomId}
                    AND job_id NOT IN ('마피아', '훼방꾼', '변장술사', '스파이', '건달')
            </when>

            <when test="isMafiaWin == 0">
                UPDATE participants
                SET flag_win = 0
                WHERE room_id = #{roomId}
                    AND job_id IN ('마피아', '훼방꾼', '변장술사', '스파이', '건달')
            </when>

            <when test="isMafiaWin == -1">
                UPDATE participants
                SET flag_win = 0
                WHERE room_id = #{roomId}
            </when>
        </choose>
    </update>


    <update id="updateEndTime" parameterType="string">
        UPDATE rooms
        SET end_time = now()
        WHERE id = #{roomId}
    </update>

    <select id="getNonCompleter" parameterType="string"
            resultType="ParticipantDto">
        SELECT p.*
        FROM daily_missions dm
                 INNER JOIN participants p ON dm.participant_id = p.id
        WHERE p.room_id = #{roomId} AND p.flag_die = 0 AND dm.flag_success = 0
          AND dm.day = (
            SELECT MAX(day)
            FROM daily_missions dm2
                     INNER JOIN participants p2 ON dm2.participant_id = p2.id
            WHERE p2.room_id = #{roomId} AND p2.flag_die = 0
        );
    </select>

</mapper>

