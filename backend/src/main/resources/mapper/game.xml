<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper
	namespace="com.ssafy.msg.game.model.mapper.GameMapper">

	<select id="checkSaboteur" resultType="int" parameterType="int">
		SELECT COALESCE(MAX(p2.ability), '0') AS ability
		FROM participants p1
				 LEFT JOIN participants p2 ON p1.room_id = p2.room_id AND p2.job_id = '훼방꾼'
		WHERE p1.id = #{participantId};
	</select>
	
	<select id="getAbilityAvailability" parameterType="GetAbilityParamDto" resultType="GetAbilityResultDto">
		SELECT
			dm.flag_success,
			p.flag_die,
			p.job_id,
			p.ability,
			r.flag_night
		FROM
			daily_missions dm
				INNER JOIN
			participants p ON dm.participant_id = p.id
				INNER JOIN
			rooms r ON p.room_id = r.id
		WHERE
			dm.participant_id = #{participantId} AND dm.day = #{day};
	</select>

	<select id="getFlagNight" parameterType="string" resultType="int">
		SELECT flag_night FROM rooms r WHERE id = #{roomId} ;
	</select>

	<update id="completeMission" parameterType="CompleteMissionDto">
		UPDATE daily_missions
		SET flag_success = 1
		WHERE participant_id = #{participantId} AND day = #{day};
	</update>

	<select id="getUserEndGame" resultType="UserEndGameDto" parameterType="int">
		SELECT
			p.job_id,
			p.flag_win,
			p.flag_die
		FROM
			participants p
				JOIN
			rooms r ON p.room_id = r.id
				JOIN
			users u ON p.user_id = u.id
		WHERE
			u.id = #{userId} AND
			r.data_type = '랜덤' AND
			r.end_time IS NOT NULL;
	</select>

	<select id="getMaxDay" resultType="integer" parameterType="int">
		SELECT
			CASE
				WHEN (SELECT MAX(dm.day)
					  FROM daily_missions dm
							   JOIN participants p ON dm.participant_id = p.id
					  WHERE p.id = #{participantId}
					 ) =
					 (SELECT MAX(dm.day)
					  FROM daily_missions dm
							   JOIN participants p ON dm.participant_id = p.id
							   JOIN rooms r ON p.room_id = r.id
					  WHERE r.id = (
						  SELECT room_id
						  FROM participants
						  WHERE id = #{participantId}
					  )
					 ) THEN
					(SELECT MAX(dm.day)
					 FROM daily_missions dm
							  JOIN participants p ON dm.participant_id = p.id
					 WHERE p.id = #{participantId}
					)
				ELSE NULL
				END AS highest_day;
	</select>

	<select id="getMyMission" resultType="MissionResultDto" parameterType="Map">
		SELECT
			latest_mission.id,
			m.normal AS normal_mission,
			m.mafia AS mafia_mission,
			latest_mission.day,
			latest_mission.flag_success,
			latest_mission.try AS cnt_try
		FROM
			missions m
				JOIN
			(SELECT
			     dm.id,
				 dm.mission_id,
				 dm.day,
				 dm.flag_success,
				 dm.try
			 FROM
				 daily_missions dm
			 WHERE
				 dm.participant_id = #{participantId}
			 ORDER BY
				 dm.day DESC
				 LIMIT 1) AS latest_mission
			ON
				m.id = latest_mission.mission_id;
	</select>

	<select id="isAlive" resultType="int" parameterType="int">
		SELECT flag_die FROM participants p WHERE p.id = #{particiapntId};
	</select>

	<insert id="createNewMission" parameterType="NewMissionDto">
		INSERT INTO daily_missions (participant_id, try, flag_success, mission_id, day, normal_vote, mafia_vote, doctor_vote, reporter_vote)
		SELECT
			p.id,
			0,
			0,
			#{missionId},
			#{day},
			p.id,
			CASE
				WHEN p.job_id = '마피아' THEN p.id
				ELSE NULL
				END AS mafia_vote,
			CASE
				WHEN p.job_id = '의사' THEN p.id
				ELSE NULL
				END AS doctor_vote,
			CASE
				WHEN p.job_id = '기자' THEN p.id
				ELSE NULL
				END AS reporter_vote
		FROM
			participants p
		WHERE
			p.room_id = #{roomId} AND p.flag_die = 0;
	</insert>

	<select id="getRandomMission" parameterType="string" resultType="int">
		SELECT
			m.id
		FROM
			missions m
		WHERE
			m.id NOT IN (
				SELECT
					dm.mission_id
				FROM
					daily_missions dm
						JOIN
					participants p ON dm.participant_id = p.id
				WHERE
					p.room_id = #{roomId}
			)
		ORDER BY
			RAND()
			LIMIT 1;
	</select>

	<select id="getMyVote" parameterType="Map" resultType="MyVoteDto">
		SELECT
				(SELECT nickname FROM participants WHERE id = dm.normal_vote) AS normal_vote,
				(SELECT nickname FROM participants WHERE id = dm.mafia_vote) AS mafia_vote,
				(SELECT nickname FROM participants WHERE id = dm.doctor_vote) AS doctor_vote,
				(SELECT nickname FROM participants WHERE id = dm.reporter_vote) AS reporter_vote
		FROM
			daily_missions dm
		WHERE
			dm.participant_id = #{participantId}
			AND dm.day = #{day};
	</select>

	<update id="normalVote" parameterType="Map">
		UPDATE daily_missions
		SET normal_vote = #{targetId}
		WHERE participant_id = #{participantId}
				  AND day = #{day};
	</update>

	<update id="mafiaVote" parameterType="Map">
		UPDATE daily_missions
		SET mafia_vote = #{targetId}
		WHERE participant_id = #{participantId}
				  AND day = #{day};
	</update>

	<update id="doctorVote" parameterType="Map">
		UPDATE daily_missions
		SET docotr_vote = #{targetId}
		WHERE participant_id = #{participantId}
				  AND day = #{day};
	</update>

	<update id="reporterVote" parameterType="Map">
		UPDATE daily_missions
		SET reporter_vote = #{targetId}
		WHERE participant_id = #{participantId}
				  AND day = #{day};
	</update>

	<select id="getAliveParticipants" resultType="AliveParticipantDto" parameterType="string">
		SELECT
			p.*,
			dm.flag_success
		FROM
			participants p
				JOIN
			daily_missions dm ON p.id = dm.participant_id
				JOIN
			(SELECT
				 participant_id,
				 MAX(day) AS max_day
			 FROM
				 daily_missions
			 GROUP BY
				 participant_id
			) max_dm ON dm.participant_id = max_dm.participant_id AND dm.day = max_dm.max_day
		WHERE
			p.room_id = #{roomId} AND p.flag_die = 0;
	</select>

	<select id="getParticipantWithPId" resultType="ParticipantDto" parameterType="int">
		SELECT * FROM participants WHERE id = #{participantId};
	</select>

	<select id="getParticipant" resultType="ParticipantDto" parameterType="ParticipantReceiveDto">
		SELECT * FROM participants WHERE user_id = #{userId} AND room_id = #{roomId};
	</select>

	<select id="getRoomVote" resultType="VoteResultDto" parameterType="string">
		SELECT
			p.id,
			p.image_url,
			p.nickname,
			(SELECT COUNT(*) FROM daily_missions dm_normal WHERE dm_normal.normal_vote = p.id AND dm_normal.day = max_day) AS normal_vote_count,
			(SELECT COUNT(*) FROM daily_missions dm_mafia WHERE dm_mafia.mafia_vote = p.id AND dm_mafia.day = max_day) AS mafia_vote_count,
			(SELECT COUNT(*) FROM daily_missions dm_doctor WHERE dm_doctor.doctor_vote = p.id AND dm_doctor.day = max_day) AS doctor_vote_count
		FROM
			participants p
				JOIN rooms r ON p.room_id = r.id
				LEFT JOIN daily_missions dm ON p.id IN (dm.normal_vote, dm.mafia_vote, dm.doctor_vote)
				AND dm.day = (
					SELECT MAX(day) FROM daily_missions dm_max_day
											 JOIN participants ON dm_max_day.participant_id = participants.id
					WHERE participants.room_id = #{roomId}
				)
				LEFT JOIN participants p_vote ON p_vote.id IN (dm.normal_vote, dm.mafia_vote, dm.doctor_vote)
				CROSS JOIN (
				SELECT MAX(day) AS max_day FROM daily_missions dm_max
													JOIN participants ON dm_max.participant_id = participants.id
				WHERE participants.room_id = #{roomId}
			) AS max_day_subquery
		WHERE
			r.id = #{roomId} AND (p_vote.flag_die IS NULL OR p_vote.flag_die = 0)
		  AND p.flag_die = 0
		GROUP BY
			p.id, p.image_url, p.nickname;
	</select>

	<select id="getUserRooms" parameterType="integer" resultType="RoomDto">
		SELECT r.*
		FROM rooms r
				 JOIN participants p ON r.id = p.room_id
		WHERE (r.data_type = '랜덤' OR r.data_type = '그룹') AND end_time IS  NULL
		  AND p.user_id = #{userId};
	</select>

	<insert id="insertParticipants" parameterType="ParticipantDto">
		INSERT INTO participants
		(room_id, user_id, job_id, nickname, image_url)
		VALUES
			<foreach collection="list" item="participant" separator=",">
				(#{participant.roomId}, #{participant.userId}, #{participant.jobId}, #{participant.nickname}, #{participant.imageUrl})
			</foreach>
	</insert>

	<delete id="deleteParticipant" parameterType="int">
		DELETE
		FROM participants
		WHERE room_id = 'room1' AND user_id = #{userId}
	</delete>

	<select id="getRandomNicknames" parameterType="int"
			resultType="RandomNameDto">
		SELECT
			fn.id AS first_name,
			ln.id AS last_name,
			img.url as img_url
		FROM
			(SELECT id, ROW_NUMBER() OVER () AS rownum FROM first_nicknames ORDER BY RAND()) as fn
				JOIN
			(SELECT id, ROW_NUMBER() OVER () AS rownum FROM last_nicknames ORDER BY RAND()) as ln
			ON fn.rownum = ln.rownum
				JOIN
			(SELECT url, ROW_NUMBER() OVER () AS rownum FROM nickname_images ORDER BY RAND()) as img
			ON ln.rownum = img.rownum
			LIMIT #{limit};
	</select>

	<select id="getRandomRoomName" resultType="RandomNameDto">
		SELECT
			fn.id AS first_name,
			ln.id AS last_name,
			img.url as img_url
		FROM
			(SELECT id, ROW_NUMBER() OVER () AS rownum FROM first_room_names ORDER BY RAND()) as fn
				JOIN
			(SELECT id, ROW_NUMBER() OVER () AS rownum FROM last_room_names ORDER BY RAND()) as ln
			ON fn.rownum = ln.rownum
				JOIN
			(SELECT url, ROW_NUMBER() OVER () AS rownum FROM room_images ORDER BY RAND()) as img
			ON ln.rownum = img.rownum
			LIMIT 1;
	</select>

	<select id="getRandomGameApplyStatus" parameterType="int" resultType="boolean">
		SELECT EXISTS(
			SELECT 1
			FROM participants
			WHERE user_id = #{userId}
			  AND room_id = 'room1'
		) AS RandomGameApplyStatus;
	</select>

	<insert id="applyRandomGame" parameterType="UserDto">
		insert into participants
			(room_id, user_id, image_url, nickname) values ("room1", #{id}, #{imageUrl}, #{nickname})
	</insert>

	<select id="isParticipantInRoom" parameterType="EnterGroupRoomDto" resultType="boolean">
		SELECT EXISTS(
			SELECT 1
			FROM participants
			WHERE user_id = #{userId}
			  AND room_id = #{roomId}
		) AS IsParticipantInRoom;
	</select>

	<select id="getParticipantsInRoom" parameterType="string"
			resultType="int">
		select id
		from participants
		where room_id = #{roomId};
	</select>

	<update id="updateStartTime" parameterType="string">
		UPDATE rooms
		SET start_time = now()
		WHERE id = #{roomId}
	</update>

	<update id="updateParticipant" parameterType="UpdateParticipantDto">
		update participants
		set nickname = #{nickname},
		    job_id = #{jobId},
		    image_url = #{imageUrl}
		where id = #{id}
	</update>
</mapper>

