<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ssafy.msg.user.model.mapper.UserMapper">

	<select id="searchUsers" parameterType="SearchUsersParamDto"
			resultType="SearchedUserDto">
		SELECT
			u.id AS userId,
			u.email_id AS userEmail,
			u.nickname,
			u.image_url AS imageUrl,
			CASE
				WHEN f_from.id IS NOT NULL THEN 1
				ELSE 0
				END AS isFollow,
			CASE
				WHEN f_to.id IS NOT NULL THEN 1
				ELSE 0
				END AS isMyFollower
		FROM
			users u
				LEFT JOIN
			follows f_from ON f_from.to_user_id = u.id AND f_from.from_user_id = #{userId}
				LEFT JOIN
			follows f_to ON f_to.from_user_id = u.id AND f_to.to_user_id = #{userId}
		WHERE
			u.email_id LIKE CONCAT('%', #{keyword}, '%') OR u.nickname LIKE CONCAT('%', #{keyword}, '%')
		GROUP BY
			u.id
		ORDER BY
			isFollow DESC, isMyFollower DESC, u.id ASC
			LIMIT #{limit} OFFSET #{offset}
	</select>

	<select id="findUserByEmailId" parameterType="string"
		resultType="UserDto">
		select id, email_id, email_password, nickname, provider,
		identifier, flag_admin, sign_in_time, sign_up_time,
		flag_private, flag_identifier, image_url, image_uuid
		from users
		where
		email_id =
		#{emailId}
	</select>

	<select id="findUserById" parameterType="int"
		resultType="UserDto">
		select id, email_id, email_password, nickname, provider,
		identifier, flag_admin, sign_in_time, sign_up_time,
		flag_private, flag_identifier, image_url, image_uuid
		from users
		where
		id
		=
		#{id}
	</select>

	<select id="getUserInfo" parameterType="int"
		resultType="UserInfoDto">
		select id, nickname, email_id, provider,
		identifier,
		flag_admin,
		sign_in_time, sign_up_time,
		flag_private, flag_identifier,
		image_url,
		image_uuid, bio
		from users
		where id =
		#{id}
	</select>

	<insert id="signUpWithOauth2" parameterType="UserDto" useGeneratedKeys="true" keyProperty="id">
		insert into users
		(nickname, email_id, provider, sign_in_time, sign_up_time)
		values
		(#{nickname}, #{emailId}, #{provider}, now(), now())
	</insert>

	<update id="signInWithOauth2" parameterType="UserDto">
		update users set
		sign_in_time = now()
		where id =
		#{id}
	</update>

	<insert id="signUp" parameterType="SignUpDto">
		insert into users
		(nickname,
		email_id, email_password) values (#{nickname}, #{emailId},
		#{emailPassword})
	</insert>

	<update id="signIn" parameterType="UserDto">
		update users set
		sign_in_time = now()
		where email_id = #{emailId}
	</update>

<!--	<update id="signOut" parameterType="int">-->
<!--		update users set-->
<!--		refresh_token = null where id = #{id}-->
<!--	</update>-->

	<delete id="withdraw" parameterType="int">
		delete from users where
		id =
		#{id}
	</delete>

	<update id="updateNickname" parameterType="UserDto">
		update users set
		nickname = #{nickname}
		where id = #{id}
	</update>

	<update id="updatePassword" parameterType="UserDto">
		update users set
		email_password = #{emailPassword}
		where id = #{id}
	</update>

	<update id="updateIdentifier" parameterType="UserDto">
		update users set
		identifier = #{identifier}, flag_identifier = #{flagIdentifier}
		where
		id = #{id}
	</update>

	<update id="updateImage" parameterType="ProfileImageDto">
		update users set
		image_url = #{imageUrl}, image_uuid = #{imageUuid}
		where id = #{id}
	</update>

	<insert id="follow" parameterType="FollowDetailDto">
		insert into follows
		(from_user_id, to_user_id) values
		(#{fromUserId},
		#{toUserId})
	</insert>

	<select id="findFollow" parameterType="FollowDetailDto"
		resultType="FollowFindDto">
		select id, from_user_id, to_user_id
		from follows
		where
		from_user_id = #{fromUserId}
		and to_user_id = #{toUserId}
	</select>

	<delete id="unfollow" parameterType="FollowDetailDto">
		delete from follows where
		from_user_id = #{fromUserId}
		and to_user_id =
		#{toUserId}
	</delete>

	<select id="getFollowList" parameterType="FollowParamDto"
		resultType="FollowUserDto">
		<choose>
			<when test="type == 'to'">
				select u.email_id, u.nickname, u.image_url,
				u.image_uuid, u.identifier,
				f.id
				from follows as f
				join users u on
				f.from_user_id = u.id
				where f.to_user_id =
				#{id}
				and f.id > #{offset}
				and u.nickname like concat('%',
				#{keyword}, '%')
				order by f.id asc
				limit #{limit}
			</when>
			<when test="type == 'from'">
				select u.email_id, u.nickname, u.image_url,
				u.image_uuid, u.identifier,
				f.id
				from follows as f
				join users u on
				f.to_user_id = u.id
				where f.from_user_id =
				#{id}
				and f.id > #{offset}
				and u.nickname like concat('%',
				#{keyword}, '%')
				order by f.id asc
				limit #{limit}
			</when>
		</choose>
	</select>

<!--	자기소개글 작성하기-->
	<insert id="updateBio" parameterType="BioDto">
		update users
		set bio = #{bio}
		where id = #{userId}
	</insert>

	<select id="getBio" parameterType="BioDto">
		select u.bio, u.id, u.email_id, u.nickname
		from users u
		where id = #{userId}
	</select>

	<select id="getTargetUserInfo" parameterType="int"
		resultType="TargetUserInfoDto">
		select u.id, u.nickname, u.email_id,
		u.identifier,
		u.image_url,
		u.image_uuid,
		u.bio,
		count(a.id) as article_count,
		(select count(*) from follows where to_user_id = #{id}) as follower_count,
		(select count(*) from follows where from_user_id = #{id}) as following_count
		from users u
		left join articles a on u.id = a.user_id
		left join follows f1 on u.id = f1.to_user_id
		left join follows f2 on u.id = f2.from_user_id
		where u.id = #{id}
		group by u.id
	</select>
	
	<select id="getIsFollow" parameterType="Map" resultType="int">
		select
		    case
				when exists(
				    select 1
				    from follows
				    where from_user_id = #{id}
				    and to_user_id = #{targetId}
				) then 1 else 0 end as is_follow
	</select>

	<select id="getRooms" parameterType="int" resultType="string">
		select p.room_id
		from participants p
		join rooms r on r.id = p.room_id
		where user_id = #{id} and r.data_type != "대기방";
	</select>
</mapper>