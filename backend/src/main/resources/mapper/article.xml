<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper
        namespace="com.ssafy.msg.article.model.mapper.ArticleMapper">

    <insert id="createArticle" parameterType="ArticleCreateDto" useGeneratedKeys="true" keyProperty="id">
        insert into articles
            (user_id, content, create_time, flag_private, room_id)
        values ( #{userId}, #{content}, now(), #{flagPrivate}, #{roomId});

    </insert>

    <update id="updateArticle" parameterType="ArticleDto">
        update articles
        set content = #{content}, modify_time = now()
        where id = #{articleId} and user_id = #{userId}
    </update>

    <delete id="deleteArticle" parameterType="DeleteArticleDto">
        delete
        from articles
        where id = #{articleId} and user_id = #{userId}
    </delete>

    <insert id="insertArticleImage" parameterType="ArticleImageDto">
        insert into article_images
            (article_id, url, uuid, flag_mission)
        values (#{articleId}, #{url}, #{uuid}, #{flagMission})

    </insert>

    <select id="getArticles" parameterType="int" resultType="ArticleWithUrlDto" >
        select a.id as article_id, a.user_id, a.create_time, a.flag_private, a.modify_time, a.room_id, ai.url,
               users.nickname, users.image_url, users.email_id
        from articles a
                 left join (
            select article_id, MIN(id) as min_id
            from article_images
            group by article_id
        ) as sub_ai on a.id = sub_ai.article_id
                 left join article_images ai on sub_ai.min_id = ai.id
        left join users on a.user_id = users.id
        where a.user_id = #{userId};

    </select>

<!--&lt;!&ndash;    비회원 피드 &ndash;&gt;-->
<!--    <select id="getGuestFeed" resultType="">-->
<!--        select *-->
<!--        from articles-->
<!--        where id &lt;= 5;-->
<!--    </select>-->

    <select id="getArticleListByRoomId" resultType="RoomArticleResultDto" parameterType="ArticleByRoomIdDto">
        SELECT
            a.id AS articleId,
            a.user_id AS userId,
            p.id AS participantId,
            p.nickname AS nickname,
            p.image_url AS iconUrl,
            a.content AS content,
            a.create_time AS createTime,
            GROUP_CONCAT(ai.url ORDER BY ai.id SEPARATOR ',') AS urls
        FROM articles a
                 JOIN participants p ON a.user_id = p.user_id AND a.room_id = p.room_id
                 LEFT JOIN article_images ai ON a.id = ai.article_id
        WHERE a.room_id = #{roomId}
        GROUP BY a.id
        ORDER BY a.create_time DESC
            LIMIT #{limit} OFFSET #{offset};
    </select>

    <select id="getArticleDetail" parameterType="ArticleDto" resultType="ArticleDetailDto">
        select users.image_url, users.nickname, users.email_id, a.id as article_id, a.user_id, a.content, a.create_time, a.flag_private, a.modify_time, a.room_id
        from articles a
        left join users on a.user_id = users.id
        where a.id = #{id};

    </select>

<!--    기본제공 게시물 조회-->
    <select id="getDefaultFeedList" resultType="ArticleDetailDto">
        select u.image_url, u.nickname, u.email_id, a.content, a.id as articleId, a.user_id
        from articles a
        left join users u on a.user_id = u.id
        where a.id &lt; 6;
    </select>

    <select id="getArticleImages" parameterType="int" resultType="ArticleImageDto">
        select *
        from article_images
        where article_id = #{articleId}
        order by id;

    </select>

    <select id="getFeedArticleList" parameterType="FeedParamDto" resultType="ArticleDetailDto">
        select users.nickname, users.email_id, users.image_url, a.id as article_id, a.user_id, a.content, a.create_time, a.flag_private, a.modify_time, a.room_id
        from articles a
        left join users on a.user_id = users.id
        where (a.user_id in (
            select f.to_user_id
            from follows f
            where f.from_user_id = #{userId}
            )
        or a.user_id = #{userId})
        and a.id &lt; coalesce(#{offset}, (select max(id) from articles))
        order by a.create_time desc
        limit #{limit};

    </select>


    <!--    좋아요 관련 쿼리문 시작 -->
    <select id="selectArticleLike" parameterType="articleDto" resultType="Boolean">
        select case
            when count(*) > 0 then true else false
        end
        from article_likes
        where article_id = #{id} and user_id = #{userId}

    </select>

    <insert id="insertArticleLike" parameterType="articleDto">
        insert into article_likes (article_id, user_id, create_time)
        values (#{id}, #{userId}, now());

    </insert>

    <delete id="deleteArticleLike" parameterType="articleDto">
        delete from article_likes
        where article_id = #{id} and user_id = #{userId};

    </delete>

    <select id="getLikeCount" parameterType="int" resultType="int">
        select count(*) as like_count
        from article_likes
        where article_id = #{articleId};

    </select>

    <select id="getLikeUserList" parameterType="int" resultType="LikeUserListDto">
        select al.user_id, users.nickname, users.email_id, users.image_url
        from article_likes al
        left join users on al.user_id = users.id
        where article_id = #{articleId}

    </select>


<!--     좋아요 관련 쿼리문 끝 -->

<!--   댓글 좋아요 관련 쿼리문 시작 -->
    <select id="selectCommentLike" parameterType="commentLikeDto" resultType="Boolean">
        select case
                   when count(*) > 0 then true else false
                   end
        from comment_likes
        where comment_id = #{commentId} and user_id = #{userId}

    </select>

    <insert id="insertCommentLike" parameterType="commentLikeDto">
        insert into comment_likes (comment_id, user_id, create_time)
        values (#{commentId}, #{userId}, now());

    </insert>

    <delete id="deleteCommentLike" parameterType="commentLikeDto">
        delete from comment_likes
        where comment_id = #{commentId} and user_id = #{userId};

    </delete>

    <select id="getCommentLikeCount" parameterType="int" resultType="int">
        select count(*) as comment_like_count
        from comment_likes
        where comment_id = #{commentId};

    </select>

    <select id="getCommentLikeUserList" parameterType="int" resultType="commentLikeUserListDto">
        select u.nickname, u.email_id, u.image_url
        from comment_likes cl
        left join users u on cl.user_id = u.id
        where comment_id = #{commentId}

    </select>

<!--   댓글 좋아요 관련 쿼리문 끝 -->

<!--    댓글 관련 쿼리문 시작-->
    <insert id="createComment" parameterType="CommentDto" useGeneratedKeys="true" keyProperty="id">
        insert into comments
            (article_id, user_id, parent_comment_id, content, create_time)
        values (#{articleId}, #{userId}, #{parentCommentId}, #{content}, now());

    </insert>

    <select id="getComments" parameterType="CommentDto" resultType="CommentDto">
        SELECT *, users.nickname, users.email_id, users.image_url
        FROM comments c
        left join users on c.user_id = users.id
        WHERE article_id = #{articleId}
        <choose>
            <when test="parentCommentId != null">
                AND parent_comment_id = #{parentCommentId}
            </when>
            <otherwise>
                AND parent_comment_id IS NULL
            </otherwise>
        </choose>;
    </select>

    <update id="updateComment" parameterType="UpdateCommentDto">
        update comments
        set content = #{content}, modify_time = now()
        where id = #{commentId} and user_id = #{userId}
    </update>

    <delete id="deleteComment" parameterType="DeleteCommentDto">
        delete
        from comments
        where id = #{commentId} and user_id = #{userId}
    </delete>

<!--    댓글 관련 쿼리문 끝-->

<!--    userId 유무 확인 -->
    <select id="getUserId" parameterType="Integer" resultType="Integer">
        select u.id
        from users u
        where id = #{userId}
    </select>

<!--    게시물 신고하기-->
    <insert id="reportArticle" parameterType="ArticleReportDto">
        insert into article_reports (article_id, from_user_id, content)
        values (#{articleId}, #{fromUserId}, #{content})
    </insert>

    <select id="getArticleReports" parameterType="int" resultType="ArticleReportDto">
        select ar.*
        from article_reports ar
        where exists (
            select 1
            from users u
            where u.id = #{userId} and u.flag_admin = 1
        )
    </select>


</mapper>